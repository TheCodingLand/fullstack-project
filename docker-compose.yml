version: '3'

services:
 websocket:
  env_file:
     - prod_env
  build: ./websocket/
  labels:
      - "traefik.backend=ws"
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.port=3001"
      - "traefik.frontend.rule=Host:ws.lbr.lu"
      - "traefik.frontend.entryPoints=http"
  expose:
    - "3001"
  links:
    - redis
  networks:
    - web

  working_dir : /usr/src/app
  command: sh -c 'node ./src/redis.js'

 web:
  env_file:
     - prod_env
  build: ./frontend-react/
  labels:
      - "traefik.backend=web"
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:tickets.lbr.lu"
      - "traefik.frontend.entryPoints=http"
  expose:
    - "8080"
  networks:
    - web
    
  links:
    - redis
  
  
 

 event-manager-ot:
  env_file:
     - prod_env
  restart: always
  build: ./event-manager/
  expose:
    - "8888"
  links:
    - postgres:postgres
    - redis:redis
  working_dir: /data/event-manager/mydjango
  volumes:
    - ./event-manager:/data/event-manager
  #command: sh -c '/usr/bin/python3 manage.py makemigrations && /usr/bin/python3 manage.py migrate && /usr/bin/python3 eventmanager.py & /usr/bin/gunicorn mydjango.wsgi:application -w 2 -b :8000'
  command: sh -c 'python3 manage.py migrate --run-syncdb && manage.py makemigrations && python3 manage.py migrate && python3 createsuperuser.py && python3 eventmanager.py & gunicorn mydjango.wsgi:application -w 2 -b :8888'
  depends_on:
   - redis
   - postgres
  networks:
   - web

 event-manager:
  env_file:
     - prod_env
  restart: always
  build: ./event-manager/
  expose:
    - "8000"
  links:
    - postgres:postgres
    - redis:redis
  working_dir: /data/event-manager/mydjango
  volumes:
    - ./event-manager:/data/event-manager
  #command: sh -c '/usr/bin/python3 manage.py makemigrations && /usr/bin/python3 manage.py migrate && /usr/bin/python3 eventmanager.py & /usr/bin/gunicorn mydjango.wsgi:application -w 2 -b :8000'
  command: sh -c 'gunicorn mydjango.wsgi:application -w 2 -b :8000'
  depends_on:
   - redis
   - postgres
   - event-manager-ot

  networks:
   - web
  
 nginx:
  restart: always
  env_file:
     - prod_env
  build: ./nginx/
  ports:
    - "8099:80"
    - "8081:8001"
  links:
    - event-manager:event-manager
    - web:web
  networks:
    - web

 postgres:
  restart: always
  env_file:
     - prod_env
  image: postgres:latest
  volumes:
    - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    - ./backups/postgresql:/backup
  expose:
    - "5432"
  networks:
    - web

 php-redis-admin:
  env_file:
     - prod_env
  image: faktiva/php-redis-admin
  container_name: pra
  environment:
   - PHPREDMIN_DATABASE_REDIS_0_HOST=redis
  ports:
   - "8093:80"
  depends_on:
   - redis
  networks:
   - web
    
 redis:
  env_file:
     - prod_env
  restart: always
  image: redis:latest
  expose:
    - "6379"
  ports:
    - "6379:6379"
  volumes:
   - ./redis:/data
  networks:
    - web
 

 logreader-tel:
  env_file:
     - prod_env
  container_name: logreader-tel
  restart: always
  build: ./logreader
  volumes:
   - './logreader:/usr/src/app'
   - '/media/callcenter/DIAGS:/media/callcenter/DIAGS/'
  environment:
   - LOGFILE=/media/callcenter/DIAGS/TelephonyServer_ccrcsl02.000
  depends_on:
   - redis
  networks:
    - web

 logreader-agent:
  env_file:
     - prod_env
  container_name: logreader-agent
  restart: always
  build: ./logreader
  volumes:
   - './logreader:/usr/src/app'
   - '/media/callcenter/DIAGS:/media/callcenter/DIAGS/'
  environment:
   - LOGFILE=/media/callcenter/DIAGS/PresenceServer_ccrcsl02.000
  depends_on:
   - redis
  networks:
    - web
   
 ot-ws:
  env_file:
     - prod_env
  container_name: ot-ws
  build: ./ot_ws
  volumes:
   - './ot_ws:/usr/src/app'
  ports:
   - 5001:5000 # expose ports - HOST:CONTAINER
   
  networks:
    - web
      
 swagger:
  env_file:
     - prod_env
  container_name: swagger
  build: ./swagger
  ports:
   - '5100:8080' # expose ports - HOST:CONTAINER
  environment:
   - API_URL=http://148.110.107.15:5001/api/ot/schema
  depends_on:
   - ot-ws
  
  networks:
    - web
    

networks:
  web:
    external: true
